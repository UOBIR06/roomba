# this variable selects the algorithm for room segmentation
# 1 = morphological segmentation
# 2 = distance segmentation
# 3 = Voronoi segmentation
# 4 = semantic segmentation
# 5 = voronoi random field segmentation
# 99 = passthrough segmentation
# int
room_segmentation_algorithm: 1

# displays the segmented map upon service call
# bool
display_segmented_map: false

# publishes the segmented map as grid map upon service call
# bool
publish_segmented_map: true

# train the semantic segmentation and the voronoi random field segmentation
train_semantic: false
train_vrf: false

# room area factor-> Set the limitation of area of the room -------> in [m^2]
#morphological segmentation: 47.0 - 0.8 (means the room area after eroding/shrinking s.t. too small/big contours are not treated as rooms)
room_area_factor_upper_limit_morphological: 47.0
room_area_factor_lower_limit_morphological: 0.8

#Voronoi segmentation: 120.0 - 1.53 (means the max/min area that an area separated by critical lines is allowed to have)
room_area_factor_upper_limit_voronoi: 100.0        #120.0
room_area_factor_lower_limit_voronoi: 1              #1.53

#parameters for the voronoi segmentation that specify the neighborhood for critical Point extraction and the distance between critical Points.
voronoi_neighborhood_index: 280         #larger value sets a larger neighborhood for searching critical points --> int
max_iterations: 150                     #sets the maximal number of iterations to search for a neighborhood, also used for the vrf segmentation --> int
min_critical_point_distance_factor: 0.5 #1.6 #minimal distance factor between two critical points before one of it gets eliminated --> double
max_area_for_merging: 12.5              #maximal area [mÂ²] of a room that should be merged with its surrounding rooms, also used for the voronoi random field segmentation

